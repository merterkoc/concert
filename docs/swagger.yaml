basePath: /v1
definitions:
  dto.BuddyRequestDTO:
    properties:
      event_id:
        type: string
      id:
        type: string
      receiver_id:
        type: string
      sender_id:
        type: string
      status:
        type: string
    type: object
  dto.CreateBuddyRequestDTO:
    properties:
      event_id:
        type: string
      receiver_id:
        type: string
    type: object
  dto.EventDTO:
    properties:
      distance:
        type: string
      end:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      is_joined:
        type: boolean
      location:
        type: string
      name:
        type: string
      participant_avatars:
        items:
          type: string
        type: array
      start:
        type: string
      ticket_url:
        type: string
    type: object
  dto.GetAllInterestsResponse:
    properties:
      interests:
        items:
          $ref: '#/definitions/entity.InterestType'
        type: array
    type: object
  dto.PatchUserInterestsRequest:
    properties:
      interest_id:
        type: integer
      operation:
        enum:
        - add
        - remove
        type: string
    required:
    - interest_id
    - operation
    type: object
  dto.UserDto:
    properties:
      buddyships_user1:
        items:
          $ref: '#/definitions/entity.Buddyship'
        type: array
      buddyships_user2:
        items:
          $ref: '#/definitions/entity.Buddyship'
        type: array
      created_at:
        type: string
      email:
        type: string
      interests:
        items:
          $ref: '#/definitions/entity.InterestType'
        type: array
      user_image:
        type: string
      username:
        type: string
    type: object
  dto.VerifyTokenRequest:
    properties:
      idToken:
        type: string
    required:
    - idToken
    type: object
  entity.Attraction:
    properties:
      _links:
        $ref: '#/definitions/entity.Links'
      classifications:
        items:
          $ref: '#/definitions/entity.Classification'
        type: array
      externalLinks:
        $ref: '#/definitions/entity.ExternalLinks'
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/entity.Image'
        type: array
      test:
        type: boolean
      type:
        type: string
      upcomingEvents:
        $ref: '#/definitions/entity.UpcomingEvents'
      url:
        type: string
    type: object
  entity.Buddyship:
    properties:
      event_id:
        type: string
      id:
        type: string
      matched_at:
        type: string
      user1:
        $ref: '#/definitions/entity.User'
      user1_id:
        type: string
      user2:
        $ref: '#/definitions/entity.User'
      user2_id:
        type: string
    type: object
  entity.City:
    properties:
      name:
        type: string
    type: object
  entity.Classification:
    properties:
      family:
        type: boolean
      genre:
        $ref: '#/definitions/entity.Genre'
      primary:
        type: boolean
      segment:
        $ref: '#/definitions/entity.Segment'
      subGenre:
        $ref: '#/definitions/entity.SubGenre'
      subType:
        $ref: '#/definitions/entity.SubType'
      type:
        $ref: '#/definitions/entity.Type'
    type: object
  entity.Country:
    properties:
      countryCode:
        type: string
      name:
        type: string
    type: object
  entity.Dates:
    properties:
      spanMultipleDays:
        type: boolean
      start:
        $ref: '#/definitions/entity.StartDate'
      status:
        $ref: '#/definitions/entity.Status'
      timezone:
        type: string
    type: object
  entity.Embedded:
    properties:
      attractions:
        items:
          $ref: '#/definitions/entity.Attraction'
        type: array
      venues:
        items:
          $ref: '#/definitions/entity.Venue'
        type: array
    type: object
  entity.Event:
    properties:
      _embedded:
        $ref: '#/definitions/entity.Embedded'
      dates:
        $ref: '#/definitions/entity.Dates'
      id:
        type: string
      locale:
        type: string
      name:
        type: string
      priceRanges:
        items:
          $ref: '#/definitions/entity.PriceRange'
        type: array
      type:
        type: string
    type: object
  entity.EventDetail:
    properties:
      _embedded:
        $ref: '#/definitions/entity.Embedded'
      _links:
        $ref: '#/definitions/entity.Links'
      classifications:
        items:
          $ref: '#/definitions/entity.Classification'
        type: array
      dates:
        $ref: '#/definitions/entity.Dates'
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/entity.Image'
        type: array
      locale:
        type: string
      name:
        type: string
      test:
        type: boolean
      type:
        type: string
      url:
        type: string
    type: object
  entity.ExternalLinks:
    properties:
      facebook:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      homepage:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      musicbrainz:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      wiki:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
    type: object
  entity.Genre:
    properties:
      id:
        type: string
    type: object
  entity.Image:
    properties:
      fallback:
        type: boolean
      height:
        type: integer
      ratio:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  entity.InterestType:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  entity.Link:
    properties:
      href:
        type: string
    type: object
  entity.Links:
    properties:
      attractions:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      self:
        $ref: '#/definitions/entity.Link'
      venues:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
    type: object
  entity.PriceRange:
    properties:
      currency:
        type: string
      max:
        type: number
      min:
        type: number
    type: object
  entity.Segment:
    properties:
      id:
        type: string
    type: object
  entity.StartDate:
    properties:
      dateTBA:
        type: boolean
      dateTBD:
        type: boolean
      dateTime:
        type: string
      localDate:
        type: string
      localTime:
        type: string
      noSpecificTime:
        type: boolean
      timeTBA:
        type: boolean
    type: object
  entity.Status:
    properties:
      code:
        type: string
    type: object
  entity.SubGenre:
    properties:
      id:
        type: string
    type: object
  entity.SubType:
    properties:
      id:
        type: string
    type: object
  entity.Type:
    properties:
      id:
        type: string
    type: object
  entity.UpcomingEvents:
    properties:
      wts-tr:
        type: integer
    type: object
  entity.User:
    properties:
      buddyships_user1:
        items:
          $ref: '#/definitions/entity.Buddyship'
        type: array
      buddyships_user2:
        items:
          $ref: '#/definitions/entity.Buddyship'
        type: array
      created_at:
        type: string
      email:
        type: string
      events:
        items:
          $ref: '#/definitions/entity.Event'
        type: array
      id:
        type: string
      interests:
        items:
          $ref: '#/definitions/entity.InterestType'
        type: array
      role:
        $ref: '#/definitions/enum.Role'
      user_image:
        type: string
      username:
        type: string
    type: object
  entity.Venue:
    properties:
      city:
        $ref: '#/definitions/entity.City'
      country:
        $ref: '#/definitions/entity.Country'
      locale:
        type: string
      name:
        type: string
      postalCode:
        type: string
    type: object
  enum.Role:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - User
    - Admin
host: localhost:8080
info:
  contact: {}
  description: GigBuddy API Documentation
  title: GigBuddy API
  version: 1.0.0
paths:
  /buddy/requests:
    get:
      description: Retrieve a list of buddy requests for a user
      produces:
      - application/json
      responses:
        "200":
          description: Return buddy requests successfully
          schema:
            items:
              $ref: '#/definitions/dto.BuddyRequestDTO'
            type: array
      security:
      - AccessToken:
        - admin
        - user
      summary: Get Buddy Requests
      tags:
      - buddy
    post:
      consumes:
      - application/json
      description: Create a buddy request between users for a specific event
      parameters:
      - description: Buddy Request Information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBuddyRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - AccessToken:
        - admin
        - user
      summary: Create Buddy Request
      tags:
      - buddy
  /buddy/requests/{id}/accept:
    post:
      consumes:
      - application/json
      description: Accept a buddy request between users for a specific event. Only
        the receiver can accept the request.
      parameters:
      - description: Buddy Request ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - AccessToken:
        - admin
        - user
      summary: Accept Buddy Request
      tags:
      - buddy
  /events:
    get:
      description: Get event by keyword
      operationId: get-event-by-keyword
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Location
        in: query
        name: location
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return event successfully
          schema:
            $ref: '#/definitions/dto.EventDTO'
      security:
      - AccessToken:
        - admin
        - user
      summary: Get event by keyword
      tags:
      - events
  /events/{eventId}/join:
    post:
      description: Join event
      operationId: join-event
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return event detail successfully
          schema:
            $ref: '#/definitions/entity.EventDetail'
      security:
      - AccessToken:
        - admin
        - user
      summary: Join event
      tags:
      - events
  /events/{eventId}/leave:
    post:
      description: Leave event
      operationId: leave-event
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return event detail successfully
          schema:
            $ref: '#/definitions/entity.EventDetail'
      security:
      - AccessToken:
        - admin
        - user
      summary: Leave event
      tags:
      - events
  /events/{id}:
    get:
      description: Get event by id
      operationId: get-event-by-id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return event detail successfully
          schema:
            $ref: '#/definitions/entity.EventDetail'
      security:
      - AccessToken:
        - admin
        - user
      summary: Get event by id
      tags:
      - events
  /events/user:
    get:
      description: Get event by user
      operationId: https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#InvalidIfaceAssignget-event-by-user
      produces:
      - application/json
      responses:
        "200":
          description: Return event detail successfully
          schema:
            $ref: '#/definitions/entity.EventDetail'
      security:
      - AccessToken:
        - admin
        - user
      summary: Get event by user
      tags:
      - events
  /identity/create:
    post:
      consumes:
      - multipart/form-data
      description: Create user
      parameters:
      - description: User's email
        in: formData
        name: email
        required: true
        type: string
      - description: User's password
        in: formData
        name: password
        required: true
        type: string
      - description: User's username
        in: formData
        name: username
        required: true
        type: string
      - description: User's profile image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Return user successfully
          schema:
            $ref: '#/definitions/entity.User'
      summary: Create user
      tags:
      - identity
  /identity/userinfo:
    get:
      consumes:
      - application/json
      description: Get user info
      produces:
      - application/json
      responses:
        "200":
          description: Return user dto successfully
          schema:
            $ref: '#/definitions/dto.UserDto'
      security:
      - AccessToken:
        - admin
        - user
      summary: Get user info
      tags:
      - identity
  /identity/userinfo/interests:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetAllInterestsResponse'
      security:
      - AccessToken:
        - admin
        - user
      summary: Get all interests
      tags:
      - identity
    patch:
      consumes:
      - application/json
      description: The operation to perform on the user's interests (either "add"
        or "remove") and the interest's ID.
      parameters:
      - description: PatchUserInterestsRequest
        in: body
        name: patchUserInterestsRequest
        required: true
        schema:
          $ref: '#/definitions/dto.PatchUserInterestsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - AccessToken:
        - admin
        - user
      tags:
      - identity
  /identity/verify:
    post:
      consumes:
      - application/json
      description: Verify token
      parameters:
      - description: VerifyTokenRequest
        in: body
        name: verifyTokenRequest
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyTokenRequest'
      produces:
      - application/json
      responses: {}
      summary: Verify token
      tags:
      - identity
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    scopes:
      admin: Grants read and write access to administrative information
      user: Grants write access
    type: apiKey
swagger: "2.0"
